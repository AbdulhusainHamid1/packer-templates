#!/usr/bin/env ruby

require 'yaml'
require 'json'

require 'thor'

class VMTemplateToPacker < Thor
  CLONE_TRAVIS_COOKBOOKS = {
    type: 'shell',
    scripts: [
      'packer-scripts/pre-chef-bootstrap',
      'packer-scripts/remove-vagrant-user',
      'packer-scripts/clone-travis-cookbooks'
    ],
    environment_vars: [
      'COOKBOOKS_BRANCH={{ user `cookbooks_branch` }}'
    ],
    execute_command: "{{ .Vars }} exec sudo -E -S bash '{{ .Path }}'"
  }.freeze

  SHRINK_DISKS = {
    type: 'shell',
    scripts: [
      'packer-scripts/cleanup',
      'packer-scripts/minimize'
    ],
    execute_command: "{{ .Vars }} exec sudo -E -S bash '{{ .Path }}'"
  }.freeze

  desc 'convert VM_TEMPLATE_FILE',
       'convert a VM template YAML file to a packer template, or modify ' \
       'an existing packer template'
  def convert(vm_template_file, packer_template_file = nil)
    vm_template = YAML.load_file(File.expand_path(vm_template_file))
    packer_template = {
      'variables' => {},
      'builders' => [
        {
          'type' => 'vmware-vmx',
          'source_path' => 'output-vmware-ubuntu-trusty-base/' \
                           'packer-vmware-ubuntu-trusty-base.vmx',
          'ssh_username' => 'travis',
          'ssh_password' => 'travis',
          'ssh_port' => 22,
          'ssh_wait_timeout' => '10000s',
          'shutdown_command' => 'sudo halt -h -p',
          'headless' => true
        }
      ],
      'provisioners' => []
    }

    unless packer_template_file.nil?
      packer_template = JSON.parse(
        File.read(File.expand_path(packer_template_file))
      )
    end

    provisioners = packer_template['provisioners']
    variables = packer_template['variables']

    chef_solo_provisioner = {
      'type' => 'chef-solo',
      'cookbook_paths' => [
        'cookbooks',
        '{{ user `travis_cookbooks_dir` }}/ci_environment'
      ],
      'remote_cookbook_paths' => [
        '/tmp/chef-stuff/travis-cookbooks/ci_environment'
      ],
      'json' => vm_template['json'],
      'run_list' => vm_template['recipes'].map { |r| "recipe[#{r}]" }
    }

    {
      'cookbooks_branch' => '{{ env `COOKBOOKS_BRANCH` }}',
      'cookbooks_sha' => '{{ env `COOKBOOKS_SHA` }}',
      'travis_cookbooks_dir' => '{{ env `TRAVIS_COOKBOOKS_DIR` }}',
      'vsphere_cluster' => '{{ env `VSPHERE_CLUSTER` }}',
      'vsphere_datacenter' => '{{ env `VSPHERE_DATACENTER` }}',
      'vsphere_datastore' => '{{ env `VSPHERE_DATASTORE` }}',
      'vsphere_host' => '{{ env `VSPHERE_HOST` }}',
      'vsphere_password' => '{{ env `VSPHERE_PASSWORD` }}',
      'vsphere_resource_pool' => '{{ env `VSPHERE_RESOURCE_POOL` }}',
      'vsphere_username' => '{{ env `VSPHERE_USERNAME` }}',
      'vsphere_vm_folder' => '{{ env `VSPHERE_VM_FOLDER` }}',
      'vsphere_vm_network' => '{{ env `VSPHERE_VM_NETWORK` }}'
    }.each do |key, value|
      variables[key] = value unless variables.key?(key)
    end

    unless provisioners.include?(CLONE_TRAVIS_COOKBOOKS)
      provisioners.unshift(CLONE_TRAVIS_COOKBOOKS)
    end

    unless provisioners.include?(chef_solo_provisioner)
      provisioners << chef_solo_provisioner
    end

    provisioners << SHRINK_DISKS unless provisioners.include?(SHRINK_DISKS)

    puts JSON.pretty_generate(
      packer_template.merge(
        'provisioners' => provisioners,
        'variables' => variables
      )
    )
  end
  default_task :convert
end

VMTemplateToPacker.start(ARGV) if $PROGRAM_NAME == __FILE__
